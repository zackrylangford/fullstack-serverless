AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Full Stack Serverless Application

Parameters:
  ProjectName:
    Type: String
    Description: Project name

  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Deployment environment

  AccountName:
    Type: String
    Description: Account name for billing purposes
    
  Globals:
  Function:
    Tags:
      Account: !Ref AccountName
      Project: !Ref ProjectName

Resources:
  MyLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect:  "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: 
            Fn::Sub: "${ProjectName}-${Environment}MyDynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:DeleteItem"
                Resource:
                  Fn::GetAtt:
                    - DynamoDBTable
                    - Arn

  GetFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName:
        Fn::Sub: "${ProjectName}-${Environment}_getFunction"
      Handler: getFunction.lambda_handler 
      Runtime: python3.9 
      CodeUri: lambda-functions/
      Role:
        Fn::GetAtt:
          - MyLambdaExecutionRole
          - Arn
      Events:
        GetItem:
          Type: Api 
          Properties:
            Path: /item/{id}
            Method: get

  PutFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName:
        Fn::Sub: "${ProjectName}-${Environment}_putFunction"
      CodeUri: lambda-functions/
      Handler: putFunction.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - MyLambdaExecutionRole
          - Arn
      Events:
        PutItem:
          Type: Api
          Properties:
            Path: /item
            Method: put

  DeleteFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName:
        Fn::Sub: "${ProjectName}-${Environment}_deleteFunction"
      CodeUri: lambda-functions/
      Handler: deleteFunction.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - MyLambdaExecutionRole
          - Arn
      Events:
        DeleteItem:
          Type: Api
          Properties:
            Path: /item/{id}
            Method: delete

  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: 
        Fn::Sub: "${ProjectName}-${Environment}_dynamodb_table"
      Tags:
        Account: !Ref AccountName
        Project: !Ref ProjectName

Outputs:
  MyApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
